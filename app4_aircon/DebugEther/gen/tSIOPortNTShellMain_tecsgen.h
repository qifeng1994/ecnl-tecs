/*
 * This file was automatically generated by tecsgen.
 * This file is not intended to be edited.
 */
#ifndef tSIOPortNTShellMain_TECSGEN_H
#define tSIOPortNTShellMain_TECSGEN_H

/*
 * celltype          :  tSIOPortNTShellMain
 * global name       :  tSIOPortNTShellMain
 * multi-domain      :  no
 * idx_is_id(actual) :  no(no)
 * singleton         :  no
 * has_CB            :  yes
 * has_INIB          :  yes
 * rom               :  yes
 * CB initializer    :  yes
 */

/* global header #_IGH_# */
#include "global_tecsgen.h"

/* signature header #_ISH_# */
#include "sSIOPort_tecsgen.h"
#include "siSIOCBR_tecsgen.h"
#include "sRoutineBody_tecsgen.h"

#ifndef TOPPERS_MACRO_ONLY

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
/* cell INIB type definition #_CIP_# */
typedef const struct tag_tSIOPortNTShellMain_INIB {
    /* call port #_TCP_# */
    /* call port #_NEP_# */ 
    /* attribute(RO) #_ATO_# */ 
    const char*    path;
}  tSIOPortNTShellMain_INIB;
/* cell CB type definition #_CCTPA_# */
typedef struct tag_tSIOPortNTShellMain_CB {
    tSIOPortNTShellMain_INIB  *_inib;
    /* call port #_TCP_# */
    /* call port #_NEP_# */ 
    /* var #_VA_# */ 
    bool_t         opened;
    struct termios saved_term;
    int_t          read_fd;
    bool_t         rcv_flag;
    char           rcv_buf;
    bool_t         rcv_rdy;
    int_t          write_fd;
    bool_t         snd_flag;
    char           snd_buf;
    bool_t         snd_rdy;
}  tSIOPortNTShellMain_CB;
/* singleton cell CB prototype declaration #_MCPB_# */
extern tSIOPortNTShellMain_CB  tSIOPortNTShellMain_CB_tab[];

/* celltype IDX type #_CTIX_# */
typedef struct tag_tSIOPortNTShellMain_CB *tSIOPortNTShellMain_IDX;

/* prototype declaration of entry port function #_EPP_# */
/* sSIOPort */
void         tSIOPortNTShellMain_eSIOPort_open(tSIOPortNTShellMain_IDX idx);
void         tSIOPortNTShellMain_eSIOPort_close(tSIOPortNTShellMain_IDX idx);
bool_t       tSIOPortNTShellMain_eSIOPort_putChar(tSIOPortNTShellMain_IDX idx, char c);
int_t        tSIOPortNTShellMain_eSIOPort_getChar(tSIOPortNTShellMain_IDX idx);
void         tSIOPortNTShellMain_eSIOPort_enableCBR(tSIOPortNTShellMain_IDX idx, uint_t cbrtn);
void         tSIOPortNTShellMain_eSIOPort_disableCBR(tSIOPortNTShellMain_IDX idx, uint_t cbrtn);
/* sRoutineBody */
void         tSIOPortNTShellMain_eTerminate_main(tSIOPortNTShellMain_IDX idx);
#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* TOPPERS_MACRO_ONLY */

/* to get the definition of CB type of referenced celltype for optimization #_ICT_# */
#ifndef  TOPPERS_CB_TYPE_ONLY
#define  tSIOPortNTShellMain_CB_TYPE_ONLY
#define TOPPERS_CB_TYPE_ONLY
#endif  /* TOPPERS_CB_TYPE_ONLY */
#include "tSerialPortMain_tecsgen.h"
#ifdef  tSIOPortNTShellMain_CB_TYPE_ONLY
#undef TOPPERS_CB_TYPE_ONLY
#endif /* tSIOPortNTShellMain_CB_TYPE_ONLY */
#ifndef TOPPERS_CB_TYPE_ONLY

#define tSIOPortNTShellMain_ID_BASE        (1)  /* ID Base  #_NIDB_# */
#define tSIOPortNTShellMain_N_CELL        (1)  /*  number of cells  #_NCEL_# */

/* IDX validation macro #_CVI_# */
#define tSIOPortNTShellMain_VALID_IDX(IDX) (1)

/* optional call port test macro #_TOCP_# */
#define tSIOPortNTShellMain_is_ciSIOCBR_joined(p_that) \
	  (1)

/* celll CB macro #_GCB_# */
#define tSIOPortNTShellMain_GET_CELLCB(idx) (idx)

/* attr access  #_AAM_# */
#define tSIOPortNTShellMain_ATTR_path( p_that )	((p_that)->_inib->path)

#define tSIOPortNTShellMain_GET_path(p_that)	((p_that)->_inib->path)


/* var access macro #_VAM_# */
#define tSIOPortNTShellMain_VAR_opened(p_that)	((p_that)->opened)
#define tSIOPortNTShellMain_VAR_saved_term(p_that)	((p_that)->saved_term)
#define tSIOPortNTShellMain_VAR_read_fd(p_that)	((p_that)->read_fd)
#define tSIOPortNTShellMain_VAR_rcv_flag(p_that)	((p_that)->rcv_flag)
#define tSIOPortNTShellMain_VAR_rcv_buf(p_that)	((p_that)->rcv_buf)
#define tSIOPortNTShellMain_VAR_rcv_rdy(p_that)	((p_that)->rcv_rdy)
#define tSIOPortNTShellMain_VAR_write_fd(p_that)	((p_that)->write_fd)
#define tSIOPortNTShellMain_VAR_snd_flag(p_that)	((p_that)->snd_flag)
#define tSIOPortNTShellMain_VAR_snd_buf(p_that)	((p_that)->snd_buf)
#define tSIOPortNTShellMain_VAR_snd_rdy(p_that)	((p_that)->snd_rdy)

#define tSIOPortNTShellMain_GET_opened(p_that)	((p_that)->opened)
#define tSIOPortNTShellMain_SET_opened(p_that,val)	((p_that)->opened=(val))
#define tSIOPortNTShellMain_GET_saved_term(p_that)	((p_that)->saved_term)
#define tSIOPortNTShellMain_SET_saved_term(p_that,val)	((p_that)->saved_term=(val))
#define tSIOPortNTShellMain_GET_read_fd(p_that)	((p_that)->read_fd)
#define tSIOPortNTShellMain_SET_read_fd(p_that,val)	((p_that)->read_fd=(val))
#define tSIOPortNTShellMain_GET_rcv_flag(p_that)	((p_that)->rcv_flag)
#define tSIOPortNTShellMain_SET_rcv_flag(p_that,val)	((p_that)->rcv_flag=(val))
#define tSIOPortNTShellMain_GET_rcv_buf(p_that)	((p_that)->rcv_buf)
#define tSIOPortNTShellMain_SET_rcv_buf(p_that,val)	((p_that)->rcv_buf=(val))
#define tSIOPortNTShellMain_GET_rcv_rdy(p_that)	((p_that)->rcv_rdy)
#define tSIOPortNTShellMain_SET_rcv_rdy(p_that,val)	((p_that)->rcv_rdy=(val))
#define tSIOPortNTShellMain_GET_write_fd(p_that)	((p_that)->write_fd)
#define tSIOPortNTShellMain_SET_write_fd(p_that,val)	((p_that)->write_fd=(val))
#define tSIOPortNTShellMain_GET_snd_flag(p_that)	((p_that)->snd_flag)
#define tSIOPortNTShellMain_SET_snd_flag(p_that,val)	((p_that)->snd_flag=(val))
#define tSIOPortNTShellMain_GET_snd_buf(p_that)	((p_that)->snd_buf)
#define tSIOPortNTShellMain_SET_snd_buf(p_that,val)	((p_that)->snd_buf=(val))
#define tSIOPortNTShellMain_GET_snd_rdy(p_that)	((p_that)->snd_rdy)
#define tSIOPortNTShellMain_SET_snd_rdy(p_that,val)	((p_that)->snd_rdy=(val))

#ifndef TECSFLOW
 /* call port function macro #_CPM_# */
#define tSIOPortNTShellMain_ciSIOCBR_readySend( p_that ) \
	  tSerialPortMain_eiSIOCBR_readySend( \
	   &tSerialPortMain_CB_tab[0] )
#define tSIOPortNTShellMain_ciSIOCBR_readyReceive( p_that ) \
	  tSerialPortMain_eiSIOCBR_readyReceive( \
	   &tSerialPortMain_CB_tab[0] )

#else  /* TECSFLOW */
#define tSIOPortNTShellMain_ciSIOCBR_readySend( p_that ) \
	  (p_that)->ciSIOCBR.readySend__T( \
 )
#define tSIOPortNTShellMain_ciSIOCBR_readyReceive( p_that ) \
	  (p_that)->ciSIOCBR.readyReceive__T( \
 )

#endif /* TECSFLOW */
#endif /* TOPPERS_CB_TYPE_ONLY */

#ifndef TOPPERS_MACRO_ONLY

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/* prototype declaration of entry port function (referenced when VMT useless optimise enabled) #_EPSP_# */
/* eTerminate */
void           tSIOPortNTShellMain_eTerminate_main_skel( const struct tag_sRoutineBody_VDES *epd);

#ifndef TOPPERS_CB_TYPE_ONLY

#endif /* TOPPERS_CB_TYPE_ONLY */

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* TOPPERS_MACRO_ONLY */

#ifndef TOPPERS_CB_TYPE_ONLY

/* IDX validation macro (abbrev.) #_CVIA_# */
#define VALID_IDX(IDX)  tSIOPortNTShellMain_VALID_IDX(IDX)


/* cell CB macro (abbrev) #_GCBA_# */
#define GET_CELLCB(idx)  tSIOPortNTShellMain_GET_CELLCB(idx)

/* CELLCB type (abbrev) #_CCT_# */
#define CELLCB	tSIOPortNTShellMain_CB

/* celltype IDX type (abbrev) #_CTIXA_# */
#define CELLIDX	tSIOPortNTShellMain_IDX


/* attr access macro (abbrev) #_AAMA_# */
#define ATTR_path            tSIOPortNTShellMain_ATTR_path( p_cellcb )


/* var access macro (abbrev) #_VAMA_# */
#define VAR_opened           tSIOPortNTShellMain_VAR_opened( p_cellcb )
#define VAR_saved_term       tSIOPortNTShellMain_VAR_saved_term( p_cellcb )
#define VAR_read_fd          tSIOPortNTShellMain_VAR_read_fd( p_cellcb )
#define VAR_rcv_flag         tSIOPortNTShellMain_VAR_rcv_flag( p_cellcb )
#define VAR_rcv_buf          tSIOPortNTShellMain_VAR_rcv_buf( p_cellcb )
#define VAR_rcv_rdy          tSIOPortNTShellMain_VAR_rcv_rdy( p_cellcb )
#define VAR_write_fd         tSIOPortNTShellMain_VAR_write_fd( p_cellcb )
#define VAR_snd_flag         tSIOPortNTShellMain_VAR_snd_flag( p_cellcb )
#define VAR_snd_buf          tSIOPortNTShellMain_VAR_snd_buf( p_cellcb )
#define VAR_snd_rdy          tSIOPortNTShellMain_VAR_snd_rdy( p_cellcb )

/* call port function macro (abbrev) #_CPMA_# */
#define ciSIOCBR_readySend( ) \
          ((void)p_cellcb, tSIOPortNTShellMain_ciSIOCBR_readySend( p_cellcb ))
#define ciSIOCBR_readyReceive( ) \
          ((void)p_cellcb, tSIOPortNTShellMain_ciSIOCBR_readyReceive( p_cellcb ))



/* optional call port test macro (abbrev) #_TOCPA_# */
#define is_ciSIOCBR_joined()\
		tSIOPortNTShellMain_is_ciSIOCBR_joined(p_cellcb)

/* entry port function macro (abbrev) #_EPM_# */
#define eSIOPort_open    tSIOPortNTShellMain_eSIOPort_open
#define eSIOPort_close   tSIOPortNTShellMain_eSIOPort_close
#define eSIOPort_putChar tSIOPortNTShellMain_eSIOPort_putChar
#define eSIOPort_getChar tSIOPortNTShellMain_eSIOPort_getChar
#define eSIOPort_enableCBR tSIOPortNTShellMain_eSIOPort_enableCBR
#define eSIOPort_disableCBR tSIOPortNTShellMain_eSIOPort_disableCBR
#define eTerminate_main  tSIOPortNTShellMain_eTerminate_main

/* iteration code (FOREACH_CELL) #_FEC_# */
#define FOREACH_CELL(i,p_cb)   \
    for( (i) = 0; (i) < tSIOPortNTShellMain_N_CELL; (i)++ ){ \
       (p_cb) = &tSIOPortNTShellMain_CB_tab[i];

#define END_FOREACH_CELL   }

/* CB initialize macro #_CIM_# */
#define INITIALIZE_CB(p_that)\
	(p_that)->opened = false;
#define SET_CB_INIB_POINTER(i,p_that)\
	(p_that)->_inib = &tSIOPortNTShellMain_INIB_tab[(i)];

#endif /* TOPPERS_CB_TYPE_ONLY */

#ifndef TOPPERS_MACRO_ONLY

#endif /* TOPPERS_MACRO_ONLY */

#endif /* tSIOPortNTShellMain_TECSGENH */
